package circle.of.fifths;

import java.io.BufferedReader;
import java.io.InputStreamReader;

import java.io.IOException;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {

  private String tones = "CDEFGAB";
  private int[] sharps = new int[]{1,3,6,8,10}; // all sharps are also flats
  private final int numOfNotes = 12;

  public int[] getCircleOfFifths(int note) {
    int[] circle = new int[numOfNotes];

    for (int i = 0; i < circle.length; i++) {
      circle[i] = note;

      note -=5;
      if (note < 0) {
        note = 12 + note;
      }
    }
    return circle;
  }

  public int[] getMajorScale(int note) {
    // TODO check if still in integer range for scale (note < 2^(31) - 1 - 11)
    int[] scale = new int[7];

    for (int i = 0; i < scale.length; i++) {
      scale[i] = note;

      // One Half step all other steps are whole steps
      if (i == 2) {
        note++;
      } else{
        note +=2;
      }
    }
    return scale;
  }

  public String noteToString(int note) {
    int octave = note/12; // integer divison gives rest of normal division

    note = note % 12;

    StringBuilder sb = new StringBuilder("(");
    // write down the 12 cases for now (less error prone)
    switch (note){
      case 0: sb.append("C ");      break;
      case 1: sb.append("C#/Db ");  break;
      case 2: sb.append("D ");      break;
      case 3: sb.append("D#/Eb ");  break;
      case 4: sb.append("E ");      break;
      case 5: sb.append("F ");      break;
      case 6: sb.append("F#/Gb ");  break;
      case 7: sb.append("G ");      break;
      case 8: sb.append("G#/Ab ");  break;
      case 9: sb.append("A ");      break;
      case 10: sb.append("A#/Bb "); break;
      case 11: sb.append("B ");     break;
      // Technically not allowed to happen
      default: System.err.println("Illegal note value");
    }
    sb.append(octave);
    sb.append(")");
    return sb.toString();
  }

  public String scaleToString(int[] scale) {
    StringBuilder sb = new StringBuilder();

    for (int i = 0; i < scale.length; i++) {
      sb.append(noteToString(scale[i]));
      sb.append(" ");
    }
    return sb.toString();
  }

  public String[] scaleToStringArray(int[] scale) {
    String[] arr = new String[scale.length];

    for (int i = 0; i < arr.length; i++) {
      arr[i] = noteToString(scale[i]);
    }
    return arr;
  }

  public String askForInput(String message) throws NullPointerException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        System.out.println(message);

        String s = null;
        try{
          s = br.readLine();
        }
        catch (IOException e) {
            System.err.println("Error reading console input " + e);
        }

        if (s != null) return s;
        else throw new NullPointerException("Console string is null");
  }

  public int parseNote(String noteString) {
    return 0;
  }
}
